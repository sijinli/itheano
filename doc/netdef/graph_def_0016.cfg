# Theano version of netdef2 dhmlpe_t004 
# 
#
[joints]
type=data
inputs=s_joints
input_dims=51
neuron=linear[0.0008333333333333334,0]


[convfeatures]
type=data
inputs=s_convfeatures
input_dims=1024
neuron=linear[0.01, 0]
# [convfeature_dropout]
# type=dropout
# keep=0.5
# inputs=convfeatures

[fc_encode0]
type=fc
inputs=joints
output_dims=1024
wd=0.01
initW=0.1
epsW=0.0005
epsB=0.002
initb=0
neuron=relu2

[fc_encode1]
type=fc
inputs=fc_encode0
output_dims=51
wd=0.01
initW=0.01
initb=0
epsW=0.0005
epsB=0.002
neuron=tanh[1,1]

[fc_f0]
type=fc
inputs=convfeatures
output_dims=1024
wd=0.01
initW=0.01
epsW=0.0005
epsB=0.002
initb=0
neuron=relu2



[fc_f1]
type=fc
inputs=fc_f0
output_dims=51
wd=0.01
initW=0.001
epsW=0.0005
epsB=0.002
initb=0
neuron=tanh[1,1]

[sqdiffcost_reconstruct]
type=cost.sqdiff
inputs=joints,fc_encode1
coeff=5

[sqdiffcost_pred]
type=cost.sqdiff
inputs=joints,fc_f1
coeff=5

[sqdiffcost_embedding]
type=cost.sqdiff
inputs=fc_encode0,fc_f0
coeff=0.01


[network]
type=network
cost_layer_names=sqdiffcost_reconstruct,sqdiffcost_pred,sqdiffcost_embedding
data_layer_names=joints,convfeatures
output_layer_names=
layer_with_weights=fc_encode0,fc_encode1,fc_f0,fc_f1

