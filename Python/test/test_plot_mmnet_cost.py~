from init_test import *
import iread.myio as mio
import pylab as pl
import iutils as iu
import options
def get_cost(d, key, cost_name):
    if key in d['model_state']:
        l = d['model_state'][key]
    else:
        l = d['solver_params'][key]
    return [e[cost_name] for e in l]
def mark_peak_point(x,y,c):
    x,y = np.array(x).flatten(), np.array(y).flatten()
    assert(x.size == y.size)
    pre = np.inf
    for i in range(x.size):
        if y[i] > pre and i + 1 < x.size and y[i] > y[i+1]:
            pl.plot(x[i],y[i],marker='*', c=c)
            print x[i],y[i]
        pre = y[i]
            
def process(op):
    data_folder = op.get_value('load_file')
    # data_folder = '/public/sijinli2/ibuffer/2015-01-16/net2_test_for_stat_2000'
    all_files = iu.getfilelist(data_folder, '\d+@\d+$')
    print all_files
    d = mio.unpickle(iu.fullfile(data_folder, all_files[0]))
    ms = d['model_state']
    train_error = get_cost(d, 'train_error', 'mmcost')
    test_error = get_cost(d, 'test_error', 'mmcost')
    ndata = len(train_error)
    pl.plot(range(ndata), train_error,c='r', label='train')
    mark_peak_point(range(ndata), train_error, 'r')
    pl.plot(range(ndata), test_error, c='g', label='test')
    pl.legend()
    pl.show()
    
def main():
    op = options.OptionsParser()
    op.add_option('load-file', 'load_file', options.StringOptionParser, 'load file folder', default=None)
    op.parse()
    op.eval_expr_defaults()
    process(op)

if __name__ == '__main__':
    main()